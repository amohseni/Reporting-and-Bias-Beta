# Close the pdf file
# dev.off()
# Open a pdf file
pdf(paste("X=", TrueStateMean, "+b=", B6, "+f=", F6, ".pdf", sep = ""))
dev.off()
# Plot TRUE MEAN = 0, BIAS = -1  & FAB = 1
B6 <- -1
F6 <- 1
ggplot(data = DfError[DfError$Bias == B6 & DfError$FaB == F6, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B6), ",  f = ", .(F6), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
### EOD
# REPORTING AND BIAS
# by Aydin Mohseni
# Load packages
library(ggplot2)
library(ggthemes)
library(reshape2)
# Set the working directory
getwd()
setwd("/Users/patience/Desktop/Images/Absolute2")
# Determine parameter values to test
TrueStateSD <- 1
TrueStateMeanVEC <- seq(from = -1, to = 1, by = 1)
BiasVEC <- seq(from = -1, to = 1, by = 1)
BiasStrengthVEC <- c(10 ^ -1, 1)
HyperboleVEC <- seq(from = 1, to = 2, by = 1)
ExtermityBiasVEC <- seq(from = 0, to = 1, by = 1)
FairAndBalancedVEC <- c(0, 1)
# Calculate the number of distinct parameter settings required
TotalDataPoints <-
length(TrueStateMeanVEC) * length(BiasVEC) * length(BiasStrengthVEC) * length(ExtermityBiasVEC) * length(HyperboleVEC) * length(FairAndBalancedVEC)
SampleSize <- 10000
# Create the data frame in which to save the data
Df <- data.frame(matrix(
data = NA,
ncol = 8,
nrow = TotalDataPoints,
byrow = TRUE
))
colnames(Df) <-
c("TrueMean", "Bias", "BiasStrength", "Hyperbole", "ExtermityBias", "FaB",  "BeliefMean", "BeliefVar")
Df[, 1] <- rep(TrueStateMeanVEC,
times = 1,
each = TotalDataPoints / length(TrueStateMeanVEC)
)
Df[, 2] <- rep(BiasVEC,
times = length(TrueStateMeanVEC),
each = TotalDataPoints / (length(TrueStateMeanVEC) * length(BiasVEC))
)
Df[, 3] <- rep(BiasStrengthVEC,
times = length(TrueStateMeanVEC) * length(BiasVEC),
each = length(HyperboleVEC) * length(ExtermityBiasVEC) * length(FairAndBalancedVEC)
)
Df[, 4] <- rep(HyperboleVEC,
times = TotalDataPoints / (length(HyperboleVEC) * length(ExtermityBiasVEC) * length(FairAndBalancedVEC)),
each = length(ExtermityBiasVEC) * length(FairAndBalancedVEC)
)
Df[, 5] <- rep(ExtermityBiasVEC,
times = TotalDataPoints / (length(ExtermityBiasVEC) * length(FairAndBalancedVEC)),
each = length(FairAndBalancedVEC)
)
Df[, 6] <- rep(FairAndBalancedVEC,
times = TotalDataPoints / length(FairAndBalancedVEC),
each = 1)
# Set up the for loops for the parameter sweep
for (i in 1:TotalDataPoints) {
# Set model parameters
TrueStateMean <- Df[i, 1]
Bias <- Df[i, 2]
BiasStrength <- Df[i, 3]
Hyperbole <- Df[i, 4]
ExtermityBias <- Df[i, 5]
FairAndBalanced <- Df[i, 6]
# Create the OBJECTIVE distribution of events for the world
x <- seq(from = -10,
to = 10,
by = 0.1)
WorldDistribution <-
sapply(x, dnorm, mean = TrueStateMean, sd = TrueStateSD)
NormalizingFactor <- sum(WorldDistribution)
### Determine the REPORTED distribution of events by news media
NewsMean <- Hyperbole * TrueStateMean
NewsSD <- Hyperbole ^ 2 * TrueStateSD
NewsDistribution <-
sapply(x, dnorm, mean = NewsMean, sd = NewsSD)
NewsDistribution[which(-ExtermityBias < x &
x < ExtermityBias)] <- 0
if (as.numeric(FairAndBalanced) == 1) {
NewsDistribution[which(x < 0)] <-
NewsDistribution[which(x < 0)] * (sum(NewsDistribution[which(x > 0)]) / (sum(NewsDistribution[which(x < 0)])))
}
NewsDistribution <-
NewsDistribution * (NormalizingFactor / sum(NewsDistribution)) # renormalize
Reported <-
sample(x,
size = SampleSize,
prob = NewsDistribution,
replace = TRUE)
ReportedMean <- mean(Reported)
ReportedSD <- sd(Reported)
# Determine the SUBJECTIVE distribution of events perceived by an individual
weightOfEvidence <- 0.5
PerceivedMean <-
(weightOfEvidence * ReportedMean) + ((1 - weightOfEvidence) * Bias)
PerceivedSD <-
(weightOfEvidence * ReportedSD) + ((1 - weightOfEvidence) * TrueStateSD)
# IndividualPerception <- sapply(x, dnorm, mean = meanPerception, sd = sdPerception)
# Save computation to the data frame
Df[i, 7] <- PerceivedMean
}
# Correct Df for error
Df$BeliefMean <- (Df$BeliefMean - TrueStateMean)
DfError <- Df
# Plot TRUE MEAN = 0, BIAS = 0 & FAB = 0
B1 <- 0
F1 <- 0
ggplot(data = DfError[DfError$Bias == B1 & DfError$FaB == F1, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B1), ",  f = ", .(F1), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
# Plot TRUE MEAN = 0, BIAS = 0 & FAB = 1
B2 <- 0
F2 <- 1
ggplot(data = DfError[DfError$Bias == B2 & DfError$FaB == F2, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B2), ",  f = ", .(F2), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
# Plot TRUE MEAN = 0, BIAS = 1 & FAB = 0
B3 <- 1
F3 <- 0
ggplot(data = DfError[DfError$Bias == B3 & DfError$FaB == F3, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B3), ",  f = ", .(F3), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
# Plot TRUE MEAN = 0, BIAS = 1  & FAB = 1
B4 <- 1
F4 <- 1
ggplot(data = DfError[DfError$Bias == B4 & DfError$FaB == F4, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B4), ",  f = ", .(F4), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
# Plot TRUE MEAN = 0, BIAS = -1  & FAB = 0
B5 <- -1
F5 <- 0
ggplot(data = DfError[DfError$Bias == B5 & DfError$FaB == F5, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B5), ",  f = ", .(F5), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
# Open a pdf file
pdf(paste("X=", TrueStateMean, "+b=", B6, "+f=", F6, ".pdf", sep = ""))
dev.off()
# Plot TRUE MEAN = 0, BIAS = -1  & FAB = 1
B6 <- -1
F6 <- 1
ggplot(data = DfError[DfError$Bias == B6 & DfError$FaB == F6, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B6), ",  f = ", .(F6), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
# Close the pdf file
# dev.off()
### EOD
ggplot(data = DfError[DfError$Bias == B6 & DfError$FaB == F6, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B6), ",  f = ", .(F6), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = DfError[DfError$Bias == B6 & DfError$FaB == F6, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B6), ",  f = ", .(F6), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
ggplot(data = DfError[DfError$Bias == B1 & DfError$FaB == F1, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B1), ",  f = ", .(F1), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
B1 <- 0
F1 <- 0
Df
DfError
DfError
ggplot(data = DfError[DfError$Bias == B1 & DfError$FaB == F1, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B1), ",  f = ", .(F1), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
B1 <- 0
F1 <- 0
ggplot(data = DfError[DfError$Bias == B1 & DfError$FaB == F1, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B1), ",  f = ", .(F1), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
B1 <- 0
B1
F1
F1 <- 0
DfError$Bias
DfError$FaB == F1
ggplot(data = DfError[DfError$Bias == B1 & DfError$FaB == F1, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B1), ",  f = ", .(F1), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
X <- ggplot(data = DfError[DfError$Bias == B1 & DfError$FaB == F1, ]) +
geom_tile(aes(x = Hyperbole, y = ExtermityBias, fill = BeliefMean), colour = "white") +
theme_minimal() +
scale_fill_gradient2(
limits = c(-3, 3),
name = "Error",
low = "black",
mid = "white",
high = "black",
midpoint = 0
) +
ggtitle(bquote(paste(mu, " = ", .(TrueStateMean), ",  ", beta, " = ", .(B1), ",  f = ", .(F1), sep = ""))) +
labs(x = "Hyperbole", y = "Extremity Bias") +
scale_x_continuous(breaks = seq(1, 3, 1)) +
scale_y_continuous(breaks = seq(0, 3, 1)) +
theme(
plot.title = element_text(
hjust = 0.5,
margin = margin(b = 10, unit = "pt"),
lineheight = 1.15
),
axis.title.x =  element_text(margin = margin(t = 15, unit = "pt")),
axis.title.y =  element_text(margin = margin(r = 15, unit = "pt")),
text = element_text(size = 16)
)
X
print(X)
